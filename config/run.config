executor {
	$slurm {
		queueSize = 100		
	}
	$local {
		cpus = 1
		memory = '4 GB'
	}
}

singularity {
	enabled = true
	autoMounts = true
}

process {
	executor = "slurm"
	withLabel: bbduk {
		cpus = 4
		memory = {8.GB * task.attempt}
		time = {2.h * task.attempt}
	}
	withName: merge_single_fastqs {
		cpus = 1
		memory = {32.GB * task.attempt}
		time = {2.d * task.attempt}
	}
	withName: run_metaphlan4 {
		publishDir = [ path: params.output_dir + "/mp4_profiles/", mode: params.publish_mode, pattern: "*.txt" ]
		cpus = 8
        memory = {64.GB * task.attempt}
        time = '14d'
	}
	withName: collate_metaphlan4_tables {
		// publishDir = [ path: params.output_dir, mode: params.publish_mode ]
		executor = "local"
	    time = '14d'
	}
	withName: run_samestr_convert {
		// publishDir = [ path: params.output_dir, mode: params.publish_mode ]
		cpus = 1
    	memory = { 64.GB * task.attempt }
    	time = { 10.hours * task.attempt }
		queue = "bigmem"
	}
	withName: run_samestr_merge {
		publishDir = [ path: params.output_dir, mode: params.publish_mode ]
		cpus = 1
    	memory = { 128.GB * task.attempt }
    	time = { 14.days }
		queue = "bigmem"
	}
	withName: run_samestr_filter {
		// publishDir = [ path: params.output_dir, mode: params.publish_mode ]
		cpus = 1
    	memory = { 128.GB * task.attempt }
    	time = { 1.days }
		queue = "bigmem"
	}
	withName: run_samestr_stats {
		publishDir = [ path: params.output_dir, mode: params.publish_mode ]
		cpus = 1
    	memory = { 128.GB * task.attempt * task.attempt }
    	time = { 1.days }
		queue = "bigmem"
	}
	withName: run_samestr_compare {
		publishDir = [ path: params.output_dir, mode: params.publish_mode ]
		cpus = 1
    	//memory = { 100.GB * task.attempt * task.attempt }
		memory = {128.GB * task.attempt}
    	time = { 14.days }
		queue = "bigmem"
	}
	withName: run_samestr_summarize {
		publishDir = [ path: params.output_dir, mode: params.publish_mode ]
		cpus = 1
    	memory = { 64.GB * task.attempt }
    	time = { 1.days }
		queue = "bigmem"
	}
	withName: fastqc {
        cpus = 2
        memory = {4.GB * task.attempt}
        time = {4.h * task.attempt}
    }
    withName: multiqc {
        cpus = 1
        memory = {4.GB * task.attempt}
        time = {4.h * task.attempt}
    }
	withName: collate_stats {
		executor = "local"
		container = null
		scratch = null
    }

}


